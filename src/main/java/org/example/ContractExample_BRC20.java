package org.example;

public class ContractExample_BRC20 {
    public static final String CODE = "\"use strict\";let globalAttribute={};const globalAttributeKey=\"global_attribute\";function makeAllowanceKey(e,t){return\"allow_\"+e+\"_to_\"+t}function approve(e,t){Utils.assert(!0===Utils.addressCheck(e),\"Arg-spender is not a valid address.\"),Utils.assert(!0===Utils.stoI64Check(t),\"Arg-value must be alphanumeric.\"),Utils.assert(Utils.int64Compare(t,\"0\")>0,\"Arg-value of spender \"+e+\" must be greater than 0.\");let a=makeAllowanceKey(Chain.tx.sender,e);return Chain.store(a,t),Chain.tlog(\"approve\",Chain.tx.sender,e,t),!0}function allowance(e,t){Utils.assert(!0===Utils.addressCheck(e),\"Arg-owner is not a valid address.\"),Utils.assert(!0===Utils.addressCheck(t),\"Arg-spender is not a valid address.\");let a=makeAllowanceKey(e,t),s=Chain.load(a);return Utils.assert(!1!==s,\"Failed to get the allowance given to \"+t+\" by \"+e+\" from metadata.\"),s}function transfer(e,t){if(Utils.assert(!0===Utils.addressCheck(e),\"Arg-to is not a valid address.\"),Utils.assert(!0===Utils.stoI64Check(t),\"Arg-value must be alphanumeric.\"),Utils.assert(Utils.int64Compare(t,\"0\")>0,\"Arg-value must be greater than 0.\"),Chain.tx.sender===e)return Chain.tlog(\"transfer\",Chain.tx.sender,e,t),!0;let a=Chain.load(Chain.tx.sender);Utils.assert(!1!==a,\"Failed to get the balance of \"+Chain.tx.sender+\" from metadata.\"),Utils.assert(Utils.int64Compare(a,t)>=0,\"Balance:\"+a+\" of sender:\"+Chain.tx.sender+\" < transfer value:\"+t+\".\");let s=Chain.load(e);return s=!1===s?t:Utils.int64Add(s,t),Chain.store(e,s),a=Utils.int64Sub(a,t),Chain.store(Chain.tx.sender,a),Chain.tlog(\"transfer\",Chain.tx.sender,e,t),!0}function transferFrom(e,t,a){if(Utils.assert(!0===Utils.addressCheck(e),\"Arg-from is not a valid address.\"),Utils.assert(!0===Utils.addressCheck(t),\"Arg-to is not a valid address.\"),Utils.assert(!0===Utils.stoI64Check(a),\"Arg-value must be alphanumeric.\"),Utils.assert(Utils.int64Compare(a,\"0\")>0,\"Arg-value must be greater than 0.\"),e===t)return Chain.tlog(\"transferFrom\",Chain.tx.sender,e,t,a),!0;let s=Chain.load(e);Utils.assert(!1!==s,\"Failed to get the value, probably because \"+e+\" has no value.\"),Utils.assert(Utils.int64Compare(s,a)>=0,e+\" Balance:\"+s+\" < transfer value:\"+a+\".\");let r=Utils.allowance(e,Chain.tx.sender);Utils.assert(Utils.int64Compare(r,a)>=0,\"Allowance value:\"+r+\" < transfer value:\"+a+\" from \"+e+\" to \"+t+\".\");let l=Chain.load(t);l=!1===l?a:Utils.int64Add(l,a),Chain.store(t,l),s=Utils.int64Sub(s,a),Chain.store(e,s);let i=makeAllowanceKey(e,Chain.tx.sender);return r=Utils.int64Sub(r,a),Chain.store(i,r),Utils.tlog(\"transferFrom\",Chain.tx.sender,e,t,a),!0}function balanceOf(e){Utils.assert(!0===Utils.addressCheck(e),\"Arg-address is not a valid address.\");let t=Chain.load(e);return Utils.assert(!1!==t,\"Failed to get the balance of \"+e+\" from metadata.\"),t}function init(e){let t=JSON.parse(e).params;Utils.assert(!0===Utils.stoI64Check(t.supply)&&t.supply>0&&\"string\"==typeof t.name&&t.name.length>0&&\"string\"==typeof t.symbol&&t.symbol.length>0&&\"string\"==typeof t.version&&t.version.length>0&&\"number\"==typeof t.decimals&&t.decimals>=0,\"Args check failed.\");let a=0,s=1;for(a=0;a<t.decimals;a+=1)s*=10;globalAttribute.totalSupply=Utils.int64Mul(t.supply,s),globalAttribute.name=t.name,globalAttribute.symbol=t.symbol,globalAttribute.version=t.version,globalAttribute.decimals=t.decimals,Chain.store(globalAttributeKey,JSON.stringify(globalAttribute)),Chain.store(Chain.tx.sender,globalAttribute.totalSupply)}function main(e){let t=JSON.parse(e);if(\"transfer\"===t.method)transfer(t.params.to,t.params.value);else if(\"transferFrom\"===t.method)transferFrom(t.params.from,t.params.to,t.params.value);else{if(\"approve\"!==t.method)throw\"<Main interface passes an invalid operation type>\";approve(t.params.spender,t.params.value)}}function query(e){let t={},a=JSON.parse(e);if(\"tokenInfo\"===a.method)globalAttribute=JSON.parse(Chain.load(globalAttributeKey)),t.tokenInfo=globalAttribute;else if(\"allowance\"===a.method)t.allowance=allowance(a.params.owner,a.params.spender);else{if(\"balanceOf\"!==a.method)throw\"<Query interface passes an invalid operation type>\";t.balance=balanceOf(a.params.address)}return JSON.stringify(t)}";
}
